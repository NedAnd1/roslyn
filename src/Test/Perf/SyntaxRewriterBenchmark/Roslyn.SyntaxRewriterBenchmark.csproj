<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <RootNamespace>Roslyn.SyntaxRewriterBenchmark</RootNamespace>
    <TargetFramework>net7.0</TargetFramework>
    <IsShipping>false</IsShipping>
    <ImplicitUsings>disable</ImplicitUsings>
    <AutoGenerateBindingRedirects>false</AutoGenerateBindingRedirects>
    <BaselineTargetFramework>netstandard2.0</BaselineTargetFramework>
    <ParseWithBothCSharpAssemblies>true</ParseWithBothCSharpAssemblies>
  </PropertyGroup>

  <PropertyGroup Condition="'$(ParseWithBothCSharpAssemblies)'=='true'">
    <DefineConstants>$(DefineConstants);ParseWithBothCSharpAssemblies</DefineConstants>
    <CopyCSharpAssemblyToOutput>false</CopyCSharpAssemblyToOutput>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="Baseline\**" />
    <EmbeddedResource Remove="Baseline\**" />
    <ProjectReference Include="Baseline\Microsoft.CodeAnalysis.Baseline.csproj" Aliases="Baseline" />
    <ProjectReference Include="..\..\..\Compilers\Core\Portable\Microsoft.CodeAnalysis.csproj" SetTargetFramework="TargetFramework=$(BaselineTargetFramework)" Private="false" />
    <ProjectReference Include="..\..\..\Compilers\CSharp\Portable\Microsoft.CodeAnalysis.CSharp.csproj" SetTargetFramework="TargetFramework=$(BaselineTargetFramework)" Private="$(CopyCSharpAssemblyToOutput)" />
  </ItemGroup>

  <ItemGroup Condition="'$(ParseWithBothCSharpAssemblies)'!='true'">
    <Compile Remove="HybridRewriter.Baseline.cs" />
    <None Include="HybridRewriter.Baseline.cs" />
  </ItemGroup>

  <PropertyGroup Condition="'$(BaselineAssemblyVersion)'!=''">
    <BaselineAssemblyVersion>$(MicrosoftCodeAnalysisBaselineAssemblyVersion)</BaselineAssemblyVersion>
  </PropertyGroup>

  <PropertyGroup>
    <BaselineOutputPath>$(ArtifactsBinDir)Microsoft.CodeAnalysis.Baseline\$(Configuration)\$(BaselineTargetFramework)\</BaselineOutputPath>
  </PropertyGroup>

  <Target Name="GetBaselineAssemblyVersion" BeforeTargets="ResolveAssemblyReferences" Condition="'$(BaselineAssemblyVersion)'==''">
    <GetAssemblyIdentity AssemblyFiles="$(BaselineOutputPath)Microsoft.CodeAnalysis.dll">
      <Output TaskParameter="Assemblies" ItemName="BaselineAssemblyId" />
    </GetAssemblyIdentity>
    <PropertyGroup>
      <BaselineAssemblyVersion>%(BaselineAssemblyId.Version)</BaselineAssemblyVersion>
    </PropertyGroup>
  </Target>

  <Target Name="GenerateBaselineAssemblyReferences" BeforeTargets="ResolveAssemblyReferences" AfterTargets="GetBaselineAssemblyVersion">
    <ItemGroup>
      <Reference Include="Microsoft.CodeAnalysis, Version=$(BaselineAssemblyVersion), Culture=neutral, PublicKeyToken=31bf3856ad364e35">
        <Aliases>Baseline</Aliases>
        <SpecificVersion>true</SpecificVersion>
        <Private>false</Private>
        <HintPath>$(BaselineOutputPath)Microsoft.CodeAnalysis.dll</HintPath>
      </Reference>
    </ItemGroup>
    <ItemGroup Condition="'$(ParseWithBothCSharpAssemblies)'=='true'">
      <!-- Use both CSharp assemblies for parsing to provide further assurance of a fair performance comparison. -->
      <Reference Include="Microsoft.CodeAnalysis.CSharp, Version=$(BaselineAssemblyVersion), Culture=neutral, PublicKeyToken=31bf3856ad364e35">
        <Aliases>Baseline</Aliases>
        <SpecificVersion>true</SpecificVersion>
        <Private>false</Private>
        <HintPath>$(BaselineOutputPath)Microsoft.CodeAnalysis.CSharp.dll</HintPath>
      </Reference>
    </ItemGroup>
  </Target>

  <Target Name="GenerateCustomAssemblyInfo" BeforeTargets="BeforeCompile;CoreCompile" AfterTargets="GetBaselineAssemblyVersion">
    <!-- Provide our assembly resolver with the metadata it may need. -->
    <PropertyGroup>
      <GeneratedCustomAssemblyInfoFile>$(IntermediateOutputPath)$(MSBuildProjectName).CustomAssemblyInfo.Generated.cs</GeneratedCustomAssemblyInfoFile>
    </PropertyGroup>
    <ItemGroup>
      <Compile Remove="$(GeneratedCustomAssemblyInfoFile)" />
      <AssemblyAttributes Include="$(RootNamespace).BaselineAssemblyInfo">
        <_Parameter1>$(BaselineAssemblyVersion)</_Parameter1>
        <_Parameter2>..\..\..\Microsoft.CodeAnalysis.Baseline\$(Configuration)\$(BaselineTargetFramework)\Microsoft.CodeAnalysis.dll</_Parameter2>
        <_Parameter3>..\..\..\Microsoft.CodeAnalysis.Baseline\$(Configuration)\$(BaselineTargetFramework)\Microsoft.CodeAnalysis.CSharp.dll</_Parameter3>
      </AssemblyAttributes>
      <AssemblyAttributes Include="$(RootNamespace).LatestAssemblyInfo">
        <_Parameter1>$(AssemblyVersion)</_Parameter1>
        <_Parameter2>..\..\..\Microsoft.CodeAnalysis\$(Configuration)\$(BaselineTargetFramework)\Microsoft.CodeAnalysis.dll</_Parameter2>
        <_Parameter3>..\..\..\Microsoft.CodeAnalysis.CSharp\$(Configuration)\$(BaselineTargetFramework)\Microsoft.CodeAnalysis.CSharp.dll</_Parameter3>
      </AssemblyAttributes>
    </ItemGroup>
    <WriteCodeFragment AssemblyAttributes="@(AssemblyAttributes)" Language="C#" OutputFile="$(GeneratedCustomAssemblyInfoFile)">
      <Output TaskParameter="OutputFile" ItemName="Compile" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>
 </Target>

</Project>
